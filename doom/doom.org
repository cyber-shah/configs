:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Doom Emacs configuration
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+attr_html: :style max-width:30%;
[[file:splash/doom-emacs-bw-light.svg]]

This is my Doom Emacs configuration. From this org file, all the necessary Doom Emacs config files are generated.

This file is written in [[https://leanpub.com/lit-config][literate programming style]] using [[https://orgmode.org/][org-mode]].

* Doom modules

This code is written to the =init.el= to select which modules to load. Written here as-is for now, as it is quite well structured and clear.

#+begin_src emacs-lisp :tangle init.el
(doom!
 :input
 ;;chinese
 ;;japanese
 ;;layout              ; auie,ctsrnm is the superior home row

 :completion
 (company +childframe) ; the ultimate code completion backend
 ;;helm                ; the *other* search engine for love and life
 ;;ido                 ; the other *other* search engine...
 ;; (ivy +prescient -childframe -fuzzy +icons)   ; a search engine for love and life
 (ivy +prescient +fuzzy +icons)   ; a search engine for love and life

 :ui
 ;;deft                ; notational velocity for Emacs
 doom                  ; what makes DOOM look the way it does
 doom-dashboard        ; a nifty splash screen for Emacs
 ;;doom-quit           ; DOOM quit-message prompts when you quit Emacs
 fill-column         ; a `fill-column' indicator
 hl-todo               ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
 ;;hydra
 indent-guides       ; highlighted indent columns
 (ligatures +extra)    ; ligatures or substitute text with pretty symbols
 ;;minimap             ; show a map of the code on the side
 modeline              ; snazzy, Atom-inspired modeline, plus API
 ;; nav-flash             ; blink cursor line after big motions
 ;;neotree             ; a project drawer, like NERDTree for vim
 ophints               ; highlight the region an operation acts on
 (popup +defaults)   ; tame sudden yet inevitable temporary windows
 tabs                ; a tab bar for Emacs
 treemacs            ; a project drawer, like neotree but cooler
 ;;unicode             ; extended unicode support for various languages
 vc-gutter           ; vcs diff in the fringe
 vi-tilde-fringe       ; fringe tildes to mark beyond EOB
 ;; window-select         ; visually switch windows
 workspaces            ; tab emulation, persistence & separate workspaces
 ;;zen                   ; distraction-free coding or writing

 :editor
 (evil +everywhere)  ; come to the dark side, we have cookies
 ;; file-templates        ; auto-snippets for empty files
 fold                ; (nigh) universal code folding
 ;;(format +onsave)    ; automated prettiness
 ;;god                 ; run Emacs commands without modifier keys
 ;;lispy               ; vim for lisp, for people who don't like vim
 ;;multiple-cursors    ; editing in many places at once
 ;;objed               ; text object editing for the innocent
 ;;parinfer            ; turn lisp into python, sort of
 ;;rotate-text         ; cycle region at point between text candidates
 snippets              ; my elves. They type so I don't have to
 ;;word-wrap           ; soft wrapping with language-aware indent

 :emacs
 ;; dired                 ; making dired pretty [functional]
 ;; electric              ; smarter, keyword-based electric-indent
 ibuffer             ; interactive buffer management
 undo                  ; persistent, smarter undo for your inevitable mistakes
 vc                    ; version-control and Emacs, sitting in a tree

 :term
 ;;eshell              ; the elisp shell that works everywhere
 ;;shell               ; simple shell REPL for Emacs
 ;;term                ; basic terminal emulator for Emacs
 ;; vterm                 ; the best terminal emulation in Emacs

 :checkers
 (syntax +childframe)  ; tasing you for every semicolon you forget
 ;; spell                 ; tasing you for misspelling mispelling
 ;;grammar             ; tasing grammar mistake every you make

 :tools
 ;; ansible
 (debugger +lsp)              ; FIXME stepping through code, to help you add bugs
 ;;direnv
 (docker +lsp)
 editorconfig        ; let someone else argue about tabs vs spaces
 ;;ein                 ; tame Jupyter notebooks with emacs
 ;;(eval +overlay)       ; run code, run (also, repls)
 ;;gist                  ; interacting with github gists
 lookup                ; navigate your code and its documentation
 lsp
 (magit +forge)        ; a git porcelain for Emacs
 ;;make                ; run make tasks from Emacs
 ;;pass                  ; password manager for nerds
 ;;pdf                 ; pdf enhancements
 ;;prodigy             ; FIXME managing external services & code builders
 ;;rgb                 ; creating color strings
 ;;taskrunner          ; taskrunner for all your projects
 ;;terraform           ; infrastructure as code
 ;;tmux                ; an API for interacting with tmux
 upload              ; map local to remote projects via ssh/ftp

 :os
 ;; (:if IS-MAC macos)    ; improve compatibility with macOS
 ;;tty                 ; improve the terminal Emacs experience

 :lang
 ;;agda                ; types of types of types of types...
 ;;cc                  ; C/C++/Obj-C madness
 ;;clojure             ; java with a lisp
 ;; common-lisp           ; if you've seen one lisp, you've seen them all
 ;;coq                 ; proofs-as-programs
 ;;crystal             ; ruby at the speed of c
 ;;csharp              ; unity, .NET, and mono shenanigans
 ;;data                ; config/data formats
 ;;(dart +flutter)     ; paint ui and not much else
 ;;elixir              ; erlang done right
 ;;elm                 ; care for a cup of TEA?
 emacs-lisp            ; drown in parentheses
 ;;erlang              ; an elegant language for a more civilized age
 ;; (ess +lsp)            ; emacs speaks statistics
 ;;faust               ; dsp, but you get to keep your soul
 ;;fsharp              ; ML stands for Microsoft's Language
 ;;fstar               ; (dependent) types and (monadic) effects and Z3
 ;;gdscript            ; the language you waited for
 (go +lsp)             ; the hipster dialect
 ;;(haskell +dante)    ; a language that's lazier than I am
 ;;hy                  ; readability of scheme w/ speed of python
 ;;idris               ; a language you can depend on
 json                  ; At least it ain't XML
 ;;(java +meghanada)   ; the poster child for carpal tunnel syndrome
 javascript          ; all(hope(abandon(ye(who(enter(here))))))
 ;;julia               ; a better, faster MATLAB
 ;;kotlin              ; a better, slicker Java(Script)
 ;; (latex +latexmk)      ; writing papers in Emacs has never been so fun
 ;;lean
 ;;factor
 ;;ledger              ; an accounting system in Emacs
 ;; lua                   ; one-based indices? one-based indices
 ;; markdown              ; writing docs for people to ignore
 ;;nim                 ; python + lisp at the speed of c
 nix                 ; I hereby declare "nix geht mehr!"
 ;;ocaml               ; an objective camel
 (org +pretty +hugo +roam2)        ; organize your plain life in plain text
 ;;php                 ; perl's insecure younger brother
 ;; plantuml              ; diagrams for confusing people more
 ;;purescript          ; javascript, but functional
 python                ; beautiful is better than ugly
 ;;qt                  ; the 'cutest' gui framework ever
 ;; racket                ; a DSL for DSLs
 ;;raku                ; the artist formerly known as perl6
 ;;rest                ; Emacs as a REST client
 ;; rst                   ; ReST in peace
 ;;(ruby +rails)       ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
 ;; rust                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
 ;;scala               ; java, but good
 ;;scheme              ; a fully conniving family of lisps
 ;; (sh +lsp)             ; she sells {ba,z,fi}sh shells on the C xor
 ;;sml
 ;;solidity            ; do you need a blockchain? No.
 ;;swift               ; who asked for emoji variables?
 ;;terra               ; Earth and Moon in alignment for performance.
 web                 ; the tubes
 (yaml +lsp)           ; JSON, but readable

 :email
 ;;(mu4e +gmail)
 ;;notmuch
 ;;(wanderlust +gmail)

 :app
 ;;calendar

 ;; Everywherer           ; *leave* Emacs!? You must be joking
 ;; irc                   ; how neckbeards socialize
 ;;(rss +org)          ; emacs as an RSS reader
 ;;twitter             ; twitter client https://twitter.com/vnought

 :config
 ;;literate
 (default +bindings +smartparens))
#+end_src


* General configuration

#+begin_src emacs-lisp
(setq user-full-name "Pranchal Shah"
      user-mail-address "p-shah256@proton.me")
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
(setq doom-theme 'doom-outrun-electric)

(setenv "SSH_AUTH_SOCK" "/run/user/1000/ssh-agent")

(setq org-directory "~/Documents/org/")
(setq org-hide-emphasis-markers t)


;; Main font configuration
(setq doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 22 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Iosevka Nerd Font Mono" :size 20)
      doom-italic-font (font-spec :family "Iosevka Nerd Font Mono" :size 22 :slant 'italic)
      doom-big-font (font-spec :family "Iosevka Nerd Font Mono" :size 28)) ;; For presentations or sharing
(setq doom-themes-enable-italic t)
(setq doom-themes-enable-bold t)
(custom-set-faces!
  '(font-lock-comment-face :slant italic :weight light)
  '(font-lock-variable-name-face :slant italic :weight regular)
  '(font-lock-function-name-face :weight demibold)
  '(font-lock-keyword-face :weight bold)
  '(font-lock-constant-face :weight bold)
  '(font-lock-string-face :weight light :slant italic)
  '(font-lock-type-face :weight demibold))
(set-face-attribute 'italic nil
                    :family "Iosevka Nerd Font Mono"
                    :slant 'italic
                    :weight 'regular)
(setq-default line-spacing 0.12)



(after! which-key
  (setq which-key-idle-delay 0.2))

(use-package! company-statistics
  :after company
  :config
  (company-statistics-mode))

(after! company
  (setq company-idle-delay 0.1)  ; Set the delay to 0.1 seconds
  (setq company-minimum-prefix-length 1))  ; Start completion after 1 character

(use-package! lsp-treemacs
  :after lsp
  :config
  (lsp-treemacs-sync-mode 1))  ;; Auto-sync Treemacs with the current LSP session

(after! treemacs
  (treemacs-follow-mode t))  ;; Enable follow mode
(after! treemacs
  (setq treemacs-file-follow-delay 0.2))  ;; Delay updates by 0.2 seconds


(after! dap-mode
  (require 'dap-node)
  (dap-node-setup))
#+end_src

#+RESULTS:

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! company-statistics)
(package! catppuccin-theme)
(package! lsp-treemacs)
#+END_SRC


* Keybinds

#+begin_src emacs-lisp :tangle config.el
(map! :n "H" #'centaur-tabs-backward
      :n "L" #'centaur-tabs-forward)

(map! :n "SPC e" #'treemacs)

(after! evil
 (map! :leader
       (:prefix "s"
        :desc "Jump to mark" :n "r" #'counsel-evil-marks)))
#+End_src

#+RESULTS:


* Programming
#+begin_src emacs-lisp :tangle config.el
(use-package! company-statistics
  :after company
  :config
  (company-statistics-mode))

(after! company
  (setq company-idle-delay 0.1)  ; Set the delay to 0.1 seconds
  (setq company-minimum-prefix-length 1)
  (add-to-list 'company-backends 'company-dabbrev)
)  ; Start completion after 1 character

(after! flycheck
  (setq flycheck-pos-tip-mode t)
  (setq flycheck-popup-tip-mode t))
#+end_src


* Languages
*** Typescript:
#+begin_src emacs-lisp :tangle config.el
(after! typescript-mode
  (setq typescript-indent-level 2))

(setq ob-mermaid-cli-path "/run/current-system/sw/bin/mmdc")

(use-package lsp-mode
  :hook
  (typescript-mode . lsp))
#+END_SRC


*** c and cpp:
#+begin_src emacs-lisp :tangle config.el
(after! lsp-mode
  (setq lsp-clients-clangd-executable "/run/current-system/sw/bin/clangd")
  (setq lsp-clients-clangd-capabilities (lsp-make-client-capabilities))
  (setq lsp-headerline-breadcrumb-enable t)

        ) ;; Customize if needed

(after! cc-mode
  (message "cc-module has been loaded.")
  ;; (setq c-basic-offset 4)
)
#+END_SRC


*** Python
#+begin_src emacs-lisp :tangle config.el
(after! lsp-mode
  (setq lsp-pyright-typechecking-mode "basic")) ;; Optional: Pyright type checking

(use-package! lsp-pylsp)

(add-hook 'python-mode-hook #'lsp)

(setq lsp-diagnostics-provider :auto)

(after! lsp-pylsp
  (setq lsp-pylsp-plugins-pylint-enabled t)  ;; Enable pylint
  (setq lsp-pylsp-plugins-flake8-enabled t)  ;; Enable flake8
  (setq lsp-pylsp-plugins-mypy-enabled t))  ;; Enable mypy
#+END_SRC

*** Docker
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package! dockerfile-mode
  :mode (("Dockerfile\\'" . dockerfile-mode)
         ("\\.dockerfile\\'" . dockerfile-mode)
         ("\\dockerfile\\'" . dockerfile-mode)
         ("/Dockerfile\\..*\\'" . dockerfile-mode)))
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(dockerfile-mode . "dockerfile"))
  (add-to-list 'lsp-disabled-clients '(dockerfile-mode . ts-ls)))
#+END_SRC

* Org
#+begin_src emacs-lisp :tangle config.el
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.75))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.25))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.15))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
#+END_SRC
